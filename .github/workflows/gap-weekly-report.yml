name: GAP Weekly Metrics Report

on:
  schedule:
    # Every Monday at 9 AM UTC
    - cron: "0 9 * * 1"
  workflow_dispatch: # Allow manual trigger

jobs:
  weekly-report:
    name: Generate Weekly GAP Report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for metrics

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate weekly metrics
        run: |
          echo "üìä Generating weekly GAP metrics..."
          npm run gap:scan:metrics -- --report=weekly --compare --export=json

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: gap-weekly-report-${{ github.run_number }}
          path: reports/metrics/
          retention-days: 90

      - name: Create Issue with Report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Find latest metrics file
            const metricsDir = 'reports/metrics/';
            const files = fs.readdirSync(metricsDir).filter(f => f.includes('weekly'));

            if (files.length === 0) {
              console.log('No metrics file found');
              return;
            }

            const latestFile = files.sort().reverse()[0];
            const metricsPath = path.join(metricsDir, latestFile);
            const metrics = JSON.parse(fs.readFileSync(metricsPath, 'utf-8'));

            // Format report with array to avoid YAML special chars
            const trendIcon = metrics.trend.direction === 'improving' ? '‚úÖ' :
                             metrics.trend.direction === 'degrading' ? '‚ö†Ô∏è' : '‚û°Ô∏è';
            const trendMsg = metrics.trend.direction === 'improving' ? 'üéâ Quality is improving!' :
                            metrics.trend.direction === 'degrading' ? '‚ö†Ô∏è Quality is degrading - action needed!' : '';

            const body = [
              '## üìä GAP Scanner Weekly Report',
              '',
              'Period: ' + metrics.startDate + ' ‚Üí ' + metrics.endDate,
              'Total Scans: ' + metrics.totalScans,
              '',
              '### üìà Average Gaps per Scan',
              '',
              '| Severity | Count | Status |',
              '|----------|-------|--------|',
              '| üî¥ P0 Critical | ' + metrics.averageGaps.P0 + ' | ' + (metrics.averageGaps.P0 === 0 ? '‚úÖ' : '‚ö†Ô∏è') + ' |',
              '| üü° P1 High | ' + metrics.averageGaps.P1 + ' | ' + (metrics.averageGaps.P1 < 5 ? '‚úÖ' : '‚ö†Ô∏è') + ' |',
              '| üü¢ P2 Medium | ' + metrics.averageGaps.P2 + ' | ' + (metrics.averageGaps.P2 < 10 ? '‚úÖ' : '‚ö†Ô∏è') + ' |',
              '| Total | ' + metrics.averageGaps.total + ' | ' + (metrics.averageGaps.total < 15 ? '‚úÖ' : '‚ö†Ô∏è') + ' |',
              '',
              '### üìâ Trend Analysis',
              '',
              trendIcon + ' ' + metrics.trend.direction.toUpperCase() + ' (' + metrics.trend.changePercent + '% change)',
              '',
              trendMsg,
              '',
              '### üîù Top Gaps',
              '',
              ...metrics.topGaps.map((gap, i) => (i + 1) + '. ' + gap.checkId + ' (' + gap.severity + '): ' + gap.count + ' occurrence(s)'),
              '',
              '### üìÇ Categories',
              '',
              ...Object.entries(metrics.categories).map(([cat, count]) => '- ' + cat + ': ' + count),
              '',
              '### üîß Auto-fixable Rate',
              '',
              metrics.autoFixableRate + '% of gaps can be auto-fixed',
              '',
              '---',
              '',
              'Actions:',
              '- Run: npm run gap:scan to see current status',
              '- Run: npm run gap:dashboard for live view',
              '- Review: GAP Scanner Guide in docs',
              '',
              'Generated automatically by GAP Scanner Weekly Report'
            ].join('\n');

            // Create issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üìä GAP Scanner Weekly Report - Week ${new Date().toISOString().slice(0, 10)}`,
              body: body,
              labels: ['gap-scanner', 'metrics', 'weekly-report']
            });

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK
        env:
          SLACK_WEBHOOK: ${{ secrets.GAP_SLACK_WEBHOOK }}
        run: |
          if [ -n "$SLACK_WEBHOOK" ]; then
            curl -X POST "$SLACK_WEBHOOK" \
              -H 'Content-Type: application/json' \
              -d '{
                "text": "üìä Weekly GAP Scanner Report Available",
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "üìä GAP Scanner Weekly Report"
                    }
                  },
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "The weekly GAP Scanner metrics report has been generated.\nCheck the GitHub Issues for details."
                    }
                  },
                  {
                    "type": "actions",
                    "elements": [
                      {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "View Report"
                        },
                        "url": "${{ github.server_url }}/${{ github.repository }}/issues"
                      }
                    ]
                  }
                ]
              }'
          fi
