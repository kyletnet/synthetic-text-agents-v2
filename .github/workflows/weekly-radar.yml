name: 🔍 Weekly Quality Radar

# Purpose: Deep quality scan for technical debt and quality drift
# Schedule: Every Monday 9am UTC
# Features:
# - Quality protection validation
# - Agent quality impact analysis
# - Historical quality tracking
# - Auto-issue creation for P0/P1 findings

on:
  schedule:
    # Every Monday at 9am UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Manual trigger
    inputs:
      scope:
        description: 'Scan scope'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - agents-only
          - quality-only

env:
  NODE_VERSION: "22"

jobs:
  radar-scan:
    name: 🔍 Deep Quality Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for quality trends

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run Radar Engine
        run: npm run radar
        env:
          CI: true
          RADAR_SCOPE: ${{ github.event.inputs.scope || 'full' }}

      - name: 🛡️ Quality Protection Validation
        run: |
          echo "🔍 Validating quality-essential files..."
          if [ -f "quality-policy.json" ]; then
            node -e "
              const { getQualityPolicyManager } = require('./scripts/lib/quality-policy.js');
              const fs = require('fs');
              const pm = getQualityPolicyManager();
              const policy = pm.exportPolicy();

              console.log('📊 Quality Protection Status:');
              console.log('  Protected files:', policy.agentProtection.static.length);

              let violations = [];
              for (const p of policy.agentProtection.static) {
                if (!fs.existsSync(p.file)) {
                  violations.push({ file: p.file, reason: 'File missing' });
                } else {
                  const stats = fs.statSync(p.file);
                  // Check if file was modified in last week
                  const weekAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;
                  if (stats.mtimeMs > weekAgo) {
                    violations.push({
                      file: p.file,
                      reason: 'Modified in last 7 days - review required',
                      severity: p.severity
                    });
                  }
                }
              }

              if (violations.length > 0) {
                console.error('⚠️  Quality protection violations:', violations);
                fs.writeFileSync(
                  'reports/quality-violations.json',
                  JSON.stringify(violations, null, 2)
                );
              } else {
                console.log('✅ All quality-essential files protected');
              }
            "
          else
            echo "⚠️ quality-policy.json not found"
          fi

      - name: 📊 Quality Trend Analysis
        run: |
          echo "📈 Analyzing quality trends..."
          if [ -f "scripts/lib/quality-history.ts" ]; then
            npx tsx scripts/lib/quality-history.ts --report
          fi

      - name: 📤 Upload Radar Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: radar-report-${{ github.run_number }}
          path: |
            reports/radar-*.json
            reports/quality-*.json
          retention-days: 90

      - name: 🚨 Create Issues for P0/P1 Findings
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Check for violations
            if (fs.existsSync('reports/quality-violations.json')) {
              const violations = JSON.parse(
                fs.readFileSync('reports/quality-violations.json', 'utf8')
              );

              // Create issue for critical violations
              const critical = violations.filter(v => v.severity === 'critical');
              if (critical.length > 0) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.name,
                  title: `🚨 Quality Protection Violations (${critical.length} critical)`,
                  body: `
# Quality Protection Violations Detected

**Critical violations found in protected files:**

${critical.map(v => `- \`${v.file}\`: ${v.reason}`).join('\n')}

**Action Required:**
1. Review changes to protected files
2. Ensure changes maintain QA generation quality
3. Update quality-policy.json if intentional

**Auto-generated by Weekly Radar**
Generated: ${new Date().toISOString()}
                  `,
                  labels: ['bug', 'quality', 'auto-generated', 'P0']
                });
              }
            }

      - name: 📊 Radar Summary
        if: always()
        run: |
          echo "# 🔍 Weekly Quality Radar Summary" > radar-summary.md
          echo "" >> radar-summary.md
          echo "**Run Date:** $(date -u)" >> radar-summary.md
          echo "" >> radar-summary.md

          if [ -f "reports/quality-violations.json" ]; then
            VIOLATION_COUNT=$(jq '. | length' reports/quality-violations.json)
            echo "- 🛡️ Quality Violations: $VIOLATION_COUNT" >> radar-summary.md
          else
            echo "- 🛡️ Quality Violations: 0 ✅" >> radar-summary.md
          fi

          echo "" >> radar-summary.md
          echo "**Full Report:** See artifacts" >> radar-summary.md

          cat radar-summary.md
