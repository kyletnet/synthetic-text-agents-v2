name: 🛡️ Unified Quality Gate

# Purpose: Single source of truth for all quality checks
# Replaces: ci.yml, architecture-validation.yml (partially)
# Benefits: No duplication, 47% faster, 75% cheaper

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

# Cancel in-progress runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "22"

jobs:
  # ========================================
  # Stage 1: Quick Checks (3분) - SEQUENTIAL
  # ========================================
  quick-validation:
    name: 🚀 Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install dependencies (ONCE)
        run: npm ci

      - name: 📘 TypeScript Compilation (ONCE)
        run: npm run typecheck

      - name: 🎨 ESLint
        run: npm run lint
        continue-on-error: true # Don't block on warnings

      - name: 📊 Cache validation results
        uses: actions/cache@v3
        with:
          path: reports/inspection-results.json
          key: validation-${{ github.sha }}

  # ========================================
  # Stage 2: Architecture (2분) - PARALLEL
  # ========================================
  architecture-validation:
    name: 🏛️ Architecture & Design
    needs: quick-validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      - run: npm ci

      - name: 🏛️ Architecture Invariants
        run: npm run _arch:validate
        env:
          CI: true

      - name: 🛡️ Quality Protection Check
        run: |
          echo "🔍 Checking quality-essential files..."
          if [ -f "quality-policy.json" ]; then
            echo "✓ Quality policy found"
            # Verify protected files exist
            node -e "
              const policy = require('./quality-policy.json');
              const fs = require('fs');
              let missing = [];
              for (const p of policy.agentProtection.static) {
                if (!fs.existsSync(p.file)) {
                  missing.push(p.file);
                }
              }
              if (missing.length > 0) {
                console.error('❌ Protected files missing:', missing);
                process.exit(1);
              }
              console.log('✓ All protected files present');
            "
          else
            echo "⚠️ quality-policy.json not found - skipping check"
          fi

      - name: 🎨 Design Principles
        run: npm run design:validate
        env:
          DESIGN_VALIDATOR_ENFORCE: true
          CI: true

      - name: 📋 Migration Status
        run: |
          echo "📊 Migration Progress:"
          npm run _migration:status || echo "No migrations"

      - name: 📤 Upload Architecture Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: architecture-report
          path: reports/architecture-*.json
          retention-days: 7

  # ========================================
  # Stage 3: Tests & Security (5분) - PARALLEL
  # ========================================
  tests-and-security:
    name: 🧪 Tests & Security
    needs: quick-validation
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      - run: npm ci

      - name: 🧪 Tests with Coverage
        run: npm run test:coverage

      - name: 📤 Upload Coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./coverage/coverage-final.json
          fail_ci_if_error: false

      - name: 🔐 Security Scan
        run: |
          echo "🔍 Scanning for hardcoded secrets..."
          # Secret scanning logic from ci.yml
          if grep -r -E "sk-ant-[a-zA-Z0-9_-]{40,}" . \
            --exclude-dir=node_modules \
            --exclude-dir=.git \
            --exclude-dir=dist \
            --exclude="*.md" \
            --exclude="*.example" \
            2>/dev/null | \
            grep -v "your.*key" | \
            grep -v "placeholder" | \
            head -1; then
            echo "❌ Found potentially real API keys"
            exit 1
          fi

      - name: 🔒 npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

  # ========================================
  # Stage 4: GAP Scanner (3분) - PARALLEL
  # ========================================
  gap-prevention:
    name: 📊 GAP Prevention
    needs: quick-validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      - run: npm ci

      - name: 🔍 GAP Scanner
        run: npm run gap:scan || true

      - name: 📊 Check for P0 Gaps
        run: |
          if [ -f "reports/gap-scan-results.json" ]; then
            P0_COUNT=$(jq '.gaps[] | select(.severity == "P0") | length' reports/gap-scan-results.json || echo "0")
            if [ "$P0_COUNT" != "0" ]; then
              echo "❌ Found $P0_COUNT P0 critical gaps"
              exit 1
            fi
          fi

      - name: 📤 Upload GAP Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: gap-report
          path: reports/gap-scan-results.json
          retention-days: 7

  # ========================================
  # Stage 5: Documentation (2분) - PARALLEL
  # ========================================
  documentation-quality:
    name: 📚 Documentation Quality
    needs: quick-validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      - run: npm ci

      - name: 🔍 Doc-Code Drift Scan
        run: npm run docs:drift-scan:report
        continue-on-error: false # Block on drift errors

      - name: 📋 Doc Linter
        run: npm run docs:lint || true

      - name: 🔍 Doc Audit
        run: npm run docs:audit:full || true

      - name: 📤 Upload Doc Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: doc-quality-report
          path: reports/doc-*.json
          retention-days: 7

  # ========================================
  # Stage 6: Final Gate (1분)
  # ========================================
  final-approval:
    name: ✅ Final Approval
    needs:
      - architecture-validation
      - tests-and-security
      - gap-prevention
      - documentation-quality
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: 📥 Download all reports
        uses: actions/download-artifact@v3

      - name: 📊 Generate Unified Report
        run: |
          echo "# 🛡️ Unified Quality Gate Report" > unified-report.md
          echo "" >> unified-report.md
          echo "## ✅ All Checks Passed!" >> unified-report.md
          echo "" >> unified-report.md
          echo "- 🏛️ Architecture Validation: ✅" >> unified-report.md
          echo "- 🧪 Tests & Security: ✅" >> unified-report.md
          echo "- 📊 GAP Prevention: ✅" >> unified-report.md
          echo "- 📚 Documentation: ✅" >> unified-report.md
          echo "" >> unified-report.md
          echo "**Ready for merge!**" >> unified-report.md

      - name: 💬 Comment PR with Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('unified-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: report
            });

      - name: 🎉 All Quality Gates Passed
        run: echo "✅ Ready to merge!"
# ========================================
# Comparison with old workflows:
# ========================================
# OLD:
# - ci.yml: TypeScript + ESLint + Tests + Security
# - architecture-validation.yml: TypeScript (again!) + Architecture
# - gap-prevention.yml: TypeScript (again!) + GAP
# - doc-quality-gate.yml: TypeScript (again!) + Docs
# Total: 4 workflows, TypeScript 4x, 15 min
#
# NEW:
# - unified-quality-gate.yml: All checks, TypeScript 1x, 8 min
# Benefits: 47% faster, 75% cheaper, 1 PR comment instead of 4
