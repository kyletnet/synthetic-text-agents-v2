name: Release

on:
  push:
    branches: [main]
    paths-ignore:
      - "docs/**"
      - "*.md"
      - ".gitignore"
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version increment type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

env:
  NODE_VERSION: "18.x"

jobs:
  # Determine if we should release
  should-release:
    name: Determine Release
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version_type: ${{ steps.check.outputs.version_type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for release
        id: check
        run: |
          echo "🔍 Release Check Debug Info"
          echo "Event name: ${{ github.event_name }}"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Ref: ${{ github.ref }}"
          echo "Repository: ${{ github.repository }}"

          # Manual trigger
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "✅ Manual trigger detected"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version_type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
            echo "📦 Release type: ${{ github.event.inputs.version_type }}"
            exit 0
          fi

          # Check commit messages for release indicators
          COMMITS=$(git log --oneline HEAD~1..HEAD)
          echo "📝 Recent commits: $COMMITS"

          # Debug commit analysis
          echo "🔍 Checking for release indicators..."

          if echo "$COMMITS" | grep -E "(feat|fix|BREAKING CHANGE|!:)"; then
            echo "✅ Release indicator found!"

            if echo "$COMMITS" | grep -E "(BREAKING CHANGE|!:)"; then
              echo "🚨 Breaking change detected -> MAJOR release"
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "version_type=major" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep "feat"; then
              echo "🚀 Feature detected -> MINOR release"
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "version_type=minor" >> $GITHUB_OUTPUT
            else
              echo "🔧 Fix detected -> PATCH release"
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "version_type=patch" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ No release indicators found (feat|fix|BREAKING CHANGE|!:)"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

          echo "📊 Final decision: should_release=$(grep should_release $GITHUB_OUTPUT | cut -d= -f2)"

  # Quality checks (same as CI)
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    needs: should-release
    if: needs.should-release.outputs.should_release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run quality checks
        run: npm run ci:quality

      - name: Build application
        run: npm run build

  # Create release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [should-release, quality]
    if: needs.should-release.outputs.should_release == 'true'
    permissions:
      contents: write
      pull-requests: write
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      release_url: ${{ steps.create_release.outputs.html_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install dependencies
        run: npm ci

      - name: Update version
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          NEW_VERSION=$(npm version ${{ needs.should-release.outputs.version_type }} --no-git-tag-version)
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG
        run: |
          # Get the new version without 'v' prefix
          VERSION="${{ steps.version.outputs.new_version }}"
          VERSION_NO_V="${VERSION#v}"
          DATE=$(date +%Y-%m-%d)

          echo "📝 Updating CHANGELOG for version $VERSION_NO_V"

          # Create new changelog entry
          cat > changelog_temp.md << EOF
          # Changelog

          All notable changes to this project will be documented in this file.

          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

          ## [$VERSION_NO_V] - $DATE

          ### Added
          - Smart Hybrid Refactor System with automated fixes and guided confirmations
          - Learning-based safety criteria that adapt to user decisions
          - Context recovery for interrupted refactoring sessions
          - Rollback system with conflict detection

          ### Changed
          - Enhanced command interface to just 2 primary commands
          - Improved risk assessment with transparent decision logging
          - Unified state management in single file
          - Updated GitHub Actions to use modern release tools

          ### Fixed
          - Deprecated actions/create-release@v1 replaced with gh release create
          - Asset upload process simplified and made more reliable
          - Enhanced debug logging for release workflow troubleshooting

          EOF

          # Append old changelog if it exists (skip header)
          if [ -f CHANGELOG.md ]; then
            echo "📄 Preserving existing changelog content"
            tail -n +9 CHANGELOG.md >> changelog_temp.md || echo "No existing changelog content"
          else
            echo "📄 Creating new changelog"
          fi
          mv changelog_temp.md CHANGELOG.md

          echo "✅ CHANGELOG updated successfully"

      - name: Commit version bump
        run: |
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore(release): ${{ steps.version.outputs.new_version }}"
          git tag ${{ steps.version.outputs.new_version }}

      - name: Build release artifacts
        run: |
          npm run build
          npm run build:export

      - name: Setup GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Create and upload build artifacts
        run: |
          # Create a zip file of build artifacts
          zip -r build-artifacts.zip dist/ dist-export/ || echo "Some directories may not exist"

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ steps.version.outputs.new_version }}"
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "v1.0.0")

          cat > release_notes.md << EOF
          ## What's Changed

          ### 🚀 Features
          - Smart Hybrid Refactor System with automated fixes
          - Interactive confirmation system for structural changes
          - Learning-based safety criteria adaptation
          - Context recovery for interrupted sessions

          ### 🔧 Improvements
          - Rollback system with conflict detection
          - Transparent decision logging for all refactor actions
          - Unified state management in single file
          - Enhanced command documentation and mapping

          ### 🛡️ Safety
          - Multi-layer runtime protection for critical files
          - Automated dependency analysis before changes
          - Risk assessment for all code modifications
          - Safe auto-fix with comprehensive validation

          ### 📊 System Intelligence
          - Learns from user decisions to improve automation
          - Smart risk categorization (low/medium/high)
          - Progressive complexity handling
          - Integration with existing CI/CD pipeline

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${VERSION}
          EOF

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.new_version }}"
          echo "🚀 Creating release for version: $VERSION"

          # Verify prerequisites
          if [ ! -f release_notes.md ]; then
            echo "❌ Release notes file not found!"
            exit 1
          fi

          if [ -z "$GITHUB_TOKEN" ]; then
            echo "❌ GITHUB_TOKEN not set!"
            exit 1
          fi

          # Check if release already exists (safety check)
          if gh release view "$VERSION" >/dev/null 2>&1; then
            echo "⚠️ Release $VERSION already exists! Skipping..."
            echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/$VERSION"
            exit 0
          fi

          echo "📋 Release notes preview:"
          head -10 release_notes.md

          # Create release with or without assets
          if [ -f build-artifacts.zip ]; then
            echo "📦 Creating release with build artifacts..."
            gh release create "$VERSION" build-artifacts.zip \
              --title "Release $VERSION" \
              --notes-file release_notes.md \
              --verify-tag || {
                echo "❌ Release creation failed!"
                echo "Attempting without assets..."
                gh release create "$VERSION" \
                  --title "Release $VERSION" \
                  --notes-file release_notes.md \
                  --verify-tag
              }
          else
            echo "📦 Creating release without assets..."
            gh release create "$VERSION" \
              --title "Release $VERSION" \
              --notes-file release_notes.md \
              --verify-tag
          fi

          echo "✅ Release created successfully!"
          echo "🌐 Release URL: https://github.com/${{ github.repository }}/releases/tag/$VERSION"

          # Verify the release was created
          if gh release view "$VERSION" >/dev/null 2>&1; then
            echo "✅ Release verification passed"
          else
            echo "❌ Release verification failed"
            exit 1
          fi

      - name: Push changes
        run: |
          git push origin main
          git push origin ${{ steps.version.outputs.new_version }}

  # Notify on completion
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release]
    if: always() && needs.release.result == 'success'
    steps:
      - name: Release notification
        run: |
          echo "🎉 Release ${{ needs.release.outputs.new_version }} created successfully!"
          echo "📦 Release URL: ${{ needs.release.outputs.release_url }}"
          echo "🚀 Ready for deployment!"
