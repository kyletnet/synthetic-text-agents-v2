"use client"

import { useState, useEffect } from "react"
import { Download, Filter, AlertTriangle, Eye, HelpCircle, X } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Checkbox } from "@/components/ui/checkbox"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"

interface QAPair {
  id: string
  question: string
  answer: string
  confidence: number
  quality_score: number
  issues: string[]
  metadata?: {
    generated_by: string[]
    processing_time: number
    cost_usd: number
  }
}

export default function ResultsPage() {
  const [qaPairs, setQaPairs] = useState<QAPair[]>([])
  const [filteredPairs, setFilteredPairs] = useState<QAPair[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string>("")
  const [searchTerm, setSearchTerm] = useState("")
  const [showOnlyHallucinated, setShowOnlyHallucinated] = useState(false)
  const [showOnlyLowQuality, setShowOnlyLowQuality] = useState(false)
  const [showHelp, setShowHelp] = useState(false)

  useEffect(() => {
    fetchResults()
  }, [])

  useEffect(() => {
    applyFilters()
  }, [qaPairs, searchTerm, showOnlyHallucinated, showOnlyLowQuality])

  const fetchResults = async () => {
    try {
      const apiBase = process.env.NEXT_PUBLIC_API_BASE || '/api'
      const response = await fetch(`${apiBase}/results`)

      if (response.ok) {
        const data = await response.json()
        setQaPairs(data.qaPairs || [])
      } else {
        const errorData = await response.json()
        setError(errorData.message || 'Failed to fetch results')
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Network error')
    } finally {
      setLoading(false)
    }
  }

  const applyFilters = () => {
    let filtered = qaPairs

    // Search filter
    if (searchTerm) {
      const term = searchTerm.toLowerCase()
      filtered = filtered.filter(
        pair =>
          pair.question.toLowerCase().includes(term) ||
          pair.answer.toLowerCase().includes(term)
      )
    }

    // Hallucination filter
    if (showOnlyHallucinated) {
      filtered = filtered.filter(pair =>
        pair.issues.some(issue => issue.toLowerCase().includes('hallucination'))
      )
    }

    // Low quality filter
    if (showOnlyLowQuality) {
      filtered = filtered.filter(pair => pair.quality_score < 7.0)
    }

    setFilteredPairs(filtered)
  }

  const downloadCSV = () => {
    const headers = ['ID', 'Question', 'Answer', 'Confidence', 'Quality Score', 'Issues', 'Generated By', 'Processing Time (ms)', 'Cost (USD)']

    const csvContent = [
      headers.join(','),
      ...filteredPairs.map(pair => [
        pair.id,
        `"${pair.question.replace(/"/g, '""')}"`,
        `"${pair.answer.replace(/"/g, '""')}"`,
        pair.confidence,
        pair.quality_score,
        `"${pair.issues.join('; ')}"`,
        `"${pair.metadata?.generated_by?.join('; ') || ''}"`,
        pair.metadata?.processing_time || '',
        pair.metadata?.cost_usd || ''
      ].join(','))
    ].join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })
    const link = document.createElement('a')
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob)
      link.setAttribute('href', url)
      link.setAttribute('download', `qa_results_${new Date().toISOString().split('T')[0]}.csv`)
      link.style.visibility = 'hidden'
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
    }
  }

  const getQualityBadge = (score: number) => {
    if (score >= 8.5) return <Badge className="bg-green-100 text-green-800" title="전문가 수준 품질">Excellent</Badge>
    if (score >= 7.5) return <Badge className="bg-blue-100 text-blue-800" title="양호한 품질">Good</Badge>
    if (score >= 7.0) return <Badge className="bg-yellow-100 text-yellow-800" title="보통 품질">Fair</Badge>
    return <Badge variant="destructive" title="개선 필요">Poor</Badge>
  }

  const getConfidenceBadge = (confidence: number) => {
    if (confidence >= 0.9) return <Badge className="bg-green-100 text-green-800" title="매우 신뢰할 수 있음">High</Badge>
    if (confidence >= 0.7) return <Badge className="bg-yellow-100 text-yellow-800" title="적당히 신뢰할 수 있음">Medium</Badge>
    return <Badge className="bg-red-100 text-red-800" title="검토 필요">Low</Badge>
  }

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
            <p className="text-gray-600">Loading results...</p>
          </div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8">
        <Card className="border-red-200 bg-red-50">
          <CardContent className="pt-6">
            <div className="flex items-center gap-3">
              <AlertTriangle className="w-5 h-5 text-red-500" />
              <div>
                <p className="font-medium text-red-800">Error loading results</p>
                <p className="text-sm text-red-600">{error}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="mb-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">QA Results</h1>
            <p className="text-gray-600">
              Review and download your generated QA pairs with quality metrics
            </p>
          </div>
          <Button
            variant="outline"
            onClick={() => setShowHelp(!showHelp)}
            className="flex items-center gap-2"
          >
            <HelpCircle className="w-4 h-4" />
            {showHelp ? 'Hide Help' : 'Evaluation Guide'}
          </Button>
        </div>
      </div>

      {/* Help Panel */}
      {showHelp && (
        <Card className="mb-6 border-blue-200 bg-blue-50">
          <CardHeader>
            <CardTitle className="flex items-center justify-between text-blue-900">
              <span className="flex items-center gap-2">
                <HelpCircle className="w-5 h-5" />
                QA 평가 지표 해석 가이드
              </span>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowHelp(false)}
                className="text-blue-700 hover:text-blue-900"
              >
                <X className="w-4 h-4" />
              </Button>
            </CardTitle>
          </CardHeader>
          <CardContent className="text-sm space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <h4 className="font-semibold text-blue-900 mb-2">📊 신뢰도 (Confidence)</h4>
                <ul className="space-y-1 text-blue-800">
                  <li>🟢 <strong>High (≥0.9)</strong>: 매우 신뢰할 수 있음</li>
                  <li>🟡 <strong>Medium (0.7-0.9)</strong>: 적당히 신뢰할 수 있음</li>
                  <li>🔴 <strong>Low (&lt;0.7)</strong>: 검토 필요</li>
                </ul>
              </div>
              <div>
                <h4 className="font-semibold text-blue-900 mb-2">⭐ 품질 점수 (Quality Score)</h4>
                <ul className="space-y-1 text-blue-800">
                  <li>🟢 <strong>Excellent (≥8.5)</strong>: 전문가 수준</li>
                  <li>🔵 <strong>Good (7.5-8.5)</strong>: 양호한 품질</li>
                  <li>🟡 <strong>Fair (7.0-7.5)</strong>: 보통 품질</li>
                  <li>🔴 <strong>Poor (&lt;7.0)</strong>: 개선 필요</li>
                </ul>
              </div>
              <div>
                <h4 className="font-semibold text-blue-900 mb-2">⚠️ 주요 이슈 유형</h4>
                <ul className="space-y-1 text-blue-800">
                  <li><strong>hallucination</strong>: 환각 내용 포함</li>
                  <li><strong>low_confidence</strong>: 낮은 신뢰도</li>
                  <li><strong>insufficient_evidence</strong>: 근거 부족</li>
                  <li><strong>general_response</strong>: 일반적/모호한 답변</li>
                </ul>
              </div>
              <div>
                <h4 className="font-semibold text-blue-900 mb-2">🎯 사용 권장 기준</h4>
                <ul className="space-y-1 text-blue-800">
                  <li><strong>교육용</strong>: 품질 8.5+ 권장</li>
                  <li><strong>업무용</strong>: 품질 7.5+ 적합</li>
                  <li><strong>검토용</strong>: 품질 7.0+ 최소</li>
                  <li><strong>환각 있음</strong>: 반드시 검토 후 사용</li>
                </ul>
              </div>
            </div>
            <div className="bg-white rounded-lg p-4 border border-blue-200">
              <h4 className="font-semibold text-blue-900 mb-2">💡 빠른 해석 팁</h4>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-3 text-blue-800">
                <div>
                  <strong>🟢 좋은 결과:</strong>
                  <br />품질 8.5+, 신뢰도 0.9+, 이슈 없음
                </div>
                <div>
                  <strong>🟡 주의 필요:</strong>
                  <br />품질 7.0-8.5, 환각이나 낮은 신뢰도
                </div>
                <div>
                  <strong>🔴 개선 필요:</strong>
                  <br />품질 7.0 미만, 다수 이슈 존재
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Summary Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <Card>
          <CardContent className="pt-6">
            <div className="text-center">
              <p className="text-2xl font-bold text-blue-600">{qaPairs.length}</p>
              <p className="text-sm text-gray-600">Total Pairs</p>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="text-center">
              <p className="text-2xl font-bold text-green-600">
                {qaPairs.filter(p => p.quality_score >= 7.0).length}
              </p>
              <p className="text-sm text-gray-600">High Quality (≥7.0)</p>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="text-center">
              <p className="text-2xl font-bold text-orange-600">
                {qaPairs.filter(p => p.issues.some(i => i.toLowerCase().includes('hallucination'))).length}
              </p>
              <p className="text-sm text-gray-600">Hallucinations</p>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="text-center">
              <p className="text-2xl font-bold text-purple-600">
                {qaPairs.length > 0 ? (qaPairs.reduce((sum, p) => sum + p.quality_score, 0) / qaPairs.length).toFixed(1) : '0.0'}
              </p>
              <p className="text-sm text-gray-600">Avg Quality Score</p>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters and Controls */}
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Filter className="w-5 h-5" />
            Filters & Controls
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col md:flex-row gap-4 items-start md:items-center">
            {/* Search */}
            <div className="flex-1">
              <Input
                placeholder="Search questions or answers..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full"
              />
            </div>

            {/* Checkboxes */}
            <div className="flex gap-4">
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="hallucinations"
                  checked={showOnlyHallucinated}
                  onCheckedChange={(checked) => setShowOnlyHallucinated(checked === true)}
                />
                <label htmlFor="hallucinations" className="text-sm font-medium">
                  Only Hallucinated
                </label>
              </div>
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="low-quality"
                  checked={showOnlyLowQuality}
                  onCheckedChange={(checked) => setShowOnlyLowQuality(checked === true)}
                />
                <label htmlFor="low-quality" className="text-sm font-medium">
                  Low Quality (&lt;7.0)
                </label>
              </div>
            </div>

            {/* Download Button */}
            <Button onClick={downloadCSV} className="flex items-center gap-2">
              <Download className="w-4 h-4" />
              Download CSV
            </Button>
          </div>

          {/* Filter Status */}
          <div className="mt-3 text-sm text-gray-600">
            Showing {filteredPairs.length} of {qaPairs.length} pairs
            {(showOnlyHallucinated || showOnlyLowQuality || searchTerm) && (
              <Button
                variant="ghost"
                size="sm"
                className="p-0 h-auto ml-2"
                onClick={() => {
                  setSearchTerm("")
                  setShowOnlyHallucinated(false)
                  setShowOnlyLowQuality(false)
                }}
              >
                Clear filters
              </Button>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Results Table */}
      <Card>
        <CardHeader>
          <CardTitle>QA Pairs</CardTitle>
        </CardHeader>
        <CardContent>
          {filteredPairs.length === 0 ? (
            <div className="text-center py-8">
              <Eye className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-600">No results match your current filters</p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead className="w-[100px]">ID</TableHead>
                    <TableHead className="min-w-[200px]">Question</TableHead>
                    <TableHead className="min-w-[300px]">Answer</TableHead>
                    <TableHead className="w-[120px]">Confidence</TableHead>
                    <TableHead className="w-[120px]">Quality</TableHead>
                    <TableHead className="w-[150px]">Issues</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredPairs.map((pair) => (
                    <TableRow key={pair.id}>
                      <TableCell className="font-mono text-xs">{pair.id}</TableCell>
                      <TableCell>
                        <div className="max-w-xs">
                          <p className="text-sm line-clamp-3">{pair.question}</p>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="max-w-md">
                          <p className="text-sm line-clamp-4">{pair.answer}</p>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="space-y-1">
                          {getConfidenceBadge(pair.confidence)}
                          <p className="text-xs text-gray-500">{pair.confidence.toFixed(2)}</p>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="space-y-1">
                          {getQualityBadge(pair.quality_score)}
                          <p className="text-xs text-gray-500">{pair.quality_score.toFixed(1)}</p>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="space-y-1">
                          {pair.issues.length > 0 ? (
                            pair.issues.map((issue, idx) => {
                              const getIssueTooltip = (issue: string) => {
                                switch (issue.toLowerCase()) {
                                  case 'hallucination': return '환각: 문서에 없는 내용 포함'
                                  case 'low_confidence': return '낮은 신뢰도: 검토 필요'
                                  case 'insufficient_evidence': return '근거 부족: 원본 문서 근거 부족'
                                  case 'general_response': return '일반적 답변: 모호하거나 일반적인 내용'
                                  case 'unknown_format': return '알 수 없는 형식: 파일 형식 인식 불가'
                                  default: return issue
                                }
                              }

                              return (
                                <Badge
                                  key={idx}
                                  variant="outline"
                                  className="text-xs"
                                  title={getIssueTooltip(issue)}
                                >
                                  {issue}
                                </Badge>
                              )
                            })
                          ) : (
                            <Badge variant="outline" className="text-xs bg-green-50 text-green-700" title="문제 없음">
                              No issues
                            </Badge>
                          )}
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}