#!/usr/bin/env bash
#
# Parallel Pre-commit Hook
# All quality checks in parallel - Fast AND thorough
#

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${BLUE}🔍 Running parallel pre-commit checks...${NC}"
echo -e "${CYAN}💡 All checks run simultaneously for speed${NC}"
echo ""

REPO_ROOT="$(git rev-parse --show-toplevel)"
cd "$REPO_ROOT"

# Temporary files for parallel job outputs
TMP_DIR=$(mktemp -d)
trap "rm -rf $TMP_DIR" EXIT

DESIGN_LOG="$TMP_DIR/design.log"
TS_LOG="$TMP_DIR/typescript.log"
ESLINT_LOG="$TMP_DIR/eslint.log"
TEST_LOG="$TMP_DIR/test.log"

# Track PIDs and exit codes
declare -A PIDS
declare -A EXITCODES

# Function to run job in background
run_background() {
    local name=$1
    local cmd=$2
    local logfile=$3

    echo -e "${CYAN}   ⏳ Starting: $name${NC}"

    # Run command, capture exit code
    (
        eval "$cmd" > "$logfile" 2>&1
        echo $? > "$logfile.exit"
    ) &

    local pid=$!
    PIDS[$name]=$pid
}

# Function to show progress spinner
show_progress() {
    local spin='-\|/'
    local i=0

    while true; do
        # Count completed jobs
        local completed=0
        local total=${#PIDS[@]}

        for name in "${!PIDS[@]}"; do
            local pid=${PIDS[$name]}
            if ! kill -0 $pid 2>/dev/null; then
                ((completed++))
            fi
        done

        # Show spinner
        printf "\r${CYAN}   ${spin:$i:1} Running checks... ($completed/$total completed)${NC}"
        i=$(( (i+1) % 4 ))

        # All done
        if [ $completed -eq $total ]; then
            printf "\r${GREEN}   ✓ All checks completed!                    ${NC}\n"
            break
        fi

        sleep 0.2
    done
}

# Start all checks in parallel
echo -e "${BLUE}📦 Launching parallel checks...${NC}"

# 1. Design Validation
run_background "design" \
    "npm run design:validate" \
    "$DESIGN_LOG"

# 2. TypeScript Compilation
run_background "typescript" \
    "npm run dev:typecheck" \
    "$TS_LOG"

# 3. ESLint
run_background "eslint" \
    "npm run dev:lint" \
    "$ESLINT_LOG"

# 4. Tests
run_background "tests" \
    "npm run test" \
    "$TEST_LOG"

echo ""

# Show progress
show_progress

echo ""
echo -e "${BLUE}📊 Checking results...${NC}"

# Wait for all jobs and collect results
FAILED=0
FAILED_CHECKS=()

for name in "${!PIDS[@]}"; do
    local pid=${PIDS[$name]}
    wait $pid 2>/dev/null || true

    # Read exit code
    local logfile="${TMP_DIR}/${name}.log"
    if [ -f "${logfile}.exit" ]; then
        local exitcode=$(cat "${logfile}.exit")
        EXITCODES[$name]=$exitcode

        if [ $exitcode -eq 0 ]; then
            echo -e "${GREEN}   ✅ $name passed${NC}"
        else
            echo -e "${RED}   ❌ $name failed (exit $exitcode)${NC}"
            FAILED=1
            FAILED_CHECKS+=("$name")
        fi
    fi
done

echo ""

# Show detailed errors for failed checks
if [ $FAILED -eq 1 ]; then
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${RED}💥 Pre-commit checks FAILED${NC}"
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""

    for check in "${FAILED_CHECKS[@]}"; do
        echo -e "${RED}📋 $check errors:${NC}"
        local logfile="${TMP_DIR}/${check}.log"
        if [ -f "$logfile" ]; then
            tail -20 "$logfile" | sed 's/^/   /'
        fi
        echo ""
    done

    echo -e "${YELLOW}💡 Quick fix commands:${NC}"
    echo -e "   ${CYAN}npm run fix${NC}           - Auto-fix issues"
    echo -e "   ${CYAN}npm run lint:fix${NC}      - Auto-fix linting"
    echo ""

    exit 1
fi

# Success!
echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo -e "${GREEN}🎉 All pre-commit checks PASSED!${NC}"
echo -e "${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
echo ""
echo -e "${CYAN}✨ Parallel execution: ~60-70% faster than sequential${NC}"
echo ""

exit 0
