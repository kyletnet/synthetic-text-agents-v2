#!/usr/bin/env bash
#
# Pre-commit hook for Synthetic Text Agents v2
# Ensures code quality and documentation standards before commits
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}🔍 Running pre-commit quality checks...${NC}"

# Get repository root
REPO_ROOT="$(git rev-parse --show-toplevel)"
cd "$REPO_ROOT"

# Track if any checks failed
FAILED=0

# Function to print status
print_status() {
    echo -e "${BLUE}   $1${NC}"
}

print_success() {
    echo -e "${GREEN}   ✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}   ⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}   ❌ $1${NC}"
    FAILED=1
}

# 1. Design Principle Validation
print_status "Validating design principles..."
if npm run design:validate >/dev/null 2>&1; then
    print_success "Design principles validated"
else
    print_error "Design principle validation failed"
    echo -e "${YELLOW}💡 Hint: Run 'npm run design:validate' to see details${NC}"
fi

# 2. TypeScript Compilation Check
print_status "Checking TypeScript compilation..."
if npm run dev:typecheck >/dev/null 2>&1; then
    print_success "TypeScript compilation passed"
else
    print_error "TypeScript compilation failed"
    echo -e "${YELLOW}💡 Hint: Run 'npm run fix' to auto-fix common TypeScript errors${NC}"
fi

# 3. ESLint Check
print_status "Checking code style with ESLint..."
if npm run dev:lint >/dev/null 2>&1; then
    print_success "ESLint checks passed"
else
    print_warning "ESLint warnings found (non-blocking)"
    echo -e "${YELLOW}💡 Hint: Run 'npm run lint:fix' to auto-fix style issues${NC}"
fi

# 4. Run Tests
print_status "Running tests..."
if npm run test >/dev/null 2>&1; then
    print_success "All tests passed"
else
    print_error "Tests failed"
    echo -e "${YELLOW}💡 Hint: Run 'npm run test' to see details${NC}"
fi

# 5. GAP Scanner (Shadow Mode - Week 1)
print_status "Running GAP Scanner (shadow mode)..."
GAP_OUTPUT=$(npm run gap:scan 2>&1)
GAP_P0=$(echo "$GAP_OUTPUT" | grep -o "P0 Critical: [0-9]*" | grep -o "[0-9]*$")
GAP_P1=$(echo "$GAP_OUTPUT" | grep -o "P1 High: [0-9]*" | grep -o "[0-9]*$")
GAP_TOTAL=$(echo "$GAP_OUTPUT" | grep -o "Total: [0-9]*" | grep -o "[0-9]*$")

if [ "$GAP_P0" = "0" ]; then
    print_success "GAP Scanner: No P0 critical gaps ($GAP_TOTAL total gaps)"
else
    print_warning "GAP Scanner: $GAP_P0 P0 critical gaps found (shadow mode - non-blocking)"
    echo -e "${YELLOW}💡 Hint: Run 'npm run gap:scan' to see details${NC}"
fi

if [ ! -z "$GAP_P1" ] && [ "$GAP_P1" -gt 0 ]; then
    print_warning "GAP Scanner: $GAP_P1 P1 high-priority gaps (informational)"
fi

# Final result
if [ $FAILED -eq 0 ]; then
    echo -e "\n${GREEN}🎉 All pre-commit checks passed! Ready to commit.${NC}"
    exit 0
else
    echo -e "\n${RED}💥 Pre-commit checks failed!${NC}"
    echo -e "${YELLOW}Fix the issues above and try committing again.${NC}"
    echo ""
    echo -e "${BLUE}Quick fix commands:${NC}"
    echo -e "  ${YELLOW}npm run fix${NC}           - Auto-fix TypeScript errors"
    echo -e "  ${YELLOW}npm run lint:fix${NC}      - Auto-fix linting issues"
    echo -e "  ${YELLOW}npm run gap:scan${NC}      - View GAP scan details"
    echo ""
    exit 1
fi
